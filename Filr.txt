local BuilderUI = {}
BuilderUI.Version = "2.3"

-- Services
local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Local Player
local player = Players.LocalPlayer
local playerGui = player:WaitForChild("PlayerGui")

--// CONFIGURATION \\--
BuilderUI.Config = {
	Animation = {
		Duration = 0.3,
		EasingStyle = Enum.EasingStyle.Quad,
		EasingDirection = Enum.EasingDirection.Out,
	},
	Themes = {
		Dark = {
			Background = Color3.fromRGB(34, 35, 39),
			Secondary = Color3.fromRGB(44, 45, 49),
			Tertiary = Color3.fromRGB(59, 61, 65),
			Accent = Color3.fromRGB(80, 150, 255),
			Text = Color3.fromRGB(255, 255, 255),
			MutedText = Color3.fromRGB(180, 180, 180),
			Error = Color3.fromRGB(231, 76, 60),
			Success = Color3.fromRGB(46, 204, 113),
			Warning = Color3.fromRGB(241, 196, 15),
			Font = Enum.Font.BuilderSans,
			BoldFont = Enum.Font.BuilderSansBold,
			Radius = UDim.new(0, 8),
		},
		Light = {
			Background = Color3.fromRGB(240, 240, 240),
			Secondary = Color3.fromRGB(255, 255, 255),
			Tertiary = Color3.fromRGB(225, 225, 225),
			Accent = Color3.fromRGB(0, 122, 255),
			Text = Color3.fromRGB(20, 20, 20),
			MutedText = Color3.fromRGB(100, 100, 100),
			Error = Color3.fromRGB(231, 76, 60),
			Success = Color3.fromRGB(46, 204, 113),
			Warning = Color3.fromRGB(241, 196, 15),
			Font = Enum.Font.BuilderSans,
			BoldFont = Enum.Font.BuilderSansBold,
			Radius = UDim.new(0, 8),
		},
		Gaming = {
	Background = Color3.fromRGB(20, 22, 28),         -- Dark background for contrast
	Secondary = Color3.fromRGB(30, 33, 40),          -- Slightly lighter for inner panels
	Tertiary = Color3.fromRGB(45, 49, 58),           -- Used for subtle layer effects
	Accent = Color3.fromRGB(0, 255, 133),            -- Neon green (Cyberpunk-style glow)
	Text = Color3.fromRGB(255, 255, 255),            -- Bright white text
	MutedText = Color3.fromRGB(140, 140, 150),       -- Desaturated text for non-focus
	Error = Color3.fromRGB(255, 69, 96),             -- Strong reddish-pink for errors
	Success = Color3.fromRGB(50, 255, 170),          -- Mint-green success highlight
	Warning = Color3.fromRGB(255, 196, 0),           -- Vibrant yellow for warnings
	Font = Enum.Font.Arcade,                         -- A retro/futuristic gamer font
	BoldFont = Enum.Font.Arcade,                     -- Same for bold (or you can use GothamBold)
	Radius = UDim.new(0, 10),                        -- Slightly rounder corners for modern feel
},
SquidGame = {
	Background = Color3.fromRGB(18, 18, 20),         -- Deep dark for suspenseful mood
	Secondary = Color3.fromRGB(30, 30, 34),          -- Slightly lighter dark for layering
	Tertiary = Color3.fromRGB(50, 50, 60),           -- Mid-tone for panels/effects
	Accent = Color3.fromRGB(255, 0, 110),            -- Bright neon pink (Squid Game uniforms)
	Text = Color3.fromRGB(255, 255, 255),            -- Pure white text
	MutedText = Color3.fromRGB(160, 160, 160),       -- Softened gray text for lesser emphasis
	Error = Color3.fromRGB(255, 45, 85),             -- Aggressive red-pink for error prompts
	Success = Color3.fromRGB(0, 220, 130),           -- Teal-green glow for success
	Warning = Color3.fromRGB(255, 210, 0),           -- Golden alert tone
	Font = Enum.Font.Gotham,                         -- Clean and modern font
	BoldFont = Enum.Font.GothamBold,                 -- Bold version for headings/buttons
	Radius = UDim.new(0, 8),                         -- Balanced roundness
},
Roblox = {
	Background = Color3.fromRGB(17, 17, 28),          -- very dark navy
	Secondary = Color3.fromRGB(27, 27, 42),           -- slightly lighter for panels
	Tertiary = Color3.fromRGB(36, 36, 58),            -- for list items or inputs
	Accent = Color3.fromRGB(0, 120, 215),             -- Windows-style blue accent
	Text = Color3.fromRGB(235, 235, 245),             -- soft white for text
	MutedText = Color3.fromRGB(150, 150, 160),        -- muted gray text
	Error = Color3.fromRGB(255, 77, 77),              -- soft red
	Success = Color3.fromRGB(76, 175, 80),            -- green
	Warning = Color3.fromRGB(255, 193, 7),            -- yellowish warning
	Font = Enum.Font.BuilderSans,
	BoldFont = Enum.Font.BuilderSansBold,
	Radius = UDim.new(0, 8),
},
DeadRails = {
	Background = Color3.fromRGB(20, 20, 22),        -- Dark background like abandoned steel
	Secondary = Color3.fromRGB(35, 35, 38),         -- Slightly lighter for UI blocks
	Tertiary = Color3.fromRGB(60, 60, 65),          -- Used for inputs / headers

	Accent = Color3.fromRGB(255, 85, 85),           -- Blood red glow (used for buttons/highlights)
	Text = Color3.fromRGB(235, 235, 235),           -- Pale off-white text
	MutedText = Color3.fromRGB(130, 130, 130),      -- Dull gray for muted info

	Error = Color3.fromRGB(200, 30, 30),            -- Harsh red for error alerts
	Success = Color3.fromRGB(40, 180, 100),         -- Slightly desaturated green
	Warning = Color3.fromRGB(200, 140, 30),         -- Warm rusty orange-yellow

	Font = Enum.Font.Gotham,                       -- Strong, readable font
	BoldFont = Enum.Font.GothamBold,               -- Bold version for titles or stats

	Radius = UDim.new(0, 4),                        -- Less rounded corners (sharp UI)
},
InkGame = {
	Background = Color3.fromRGB(15, 15, 18),           -- Deep near-black
	Secondary = Color3.fromRGB(30, 30, 34),            -- Panel and section blocks
	Tertiary = Color3.fromRGB(45, 45, 50),             -- Input fields or side panels

	Accent = Color3.fromRGB(100, 255, 100),            -- Bright green (start of gradient)
	AccentSecondary = Color3.fromRGB(255, 255, 100),   -- Neon yellow (end of gradient)

	Text = Color3.fromRGB(240, 240, 240),              -- Bright clean text
	MutedText = Color3.fromRGB(160, 160, 160),         -- Dimmed label or description text

	Error = Color3.fromRGB(255, 80, 80),               -- Warning red
	Success = Color3.fromRGB(120, 255, 160),           -- Confirm green
	Warning = Color3.fromRGB(255, 230, 100),           -- Alert yellow

	Font = Enum.Font.Gotham,                           -- Clean, readable font
	BoldFont = Enum.Font.GothamBold,                   -- Bold headlines/stats

	Radius = UDim.new(0, 6),                           -- Slightly rounded corners
},
Gold = {
	Background = Color3.fromRGB(24, 24, 26),        -- dark base for gold to stand out
	Secondary = Color3.fromRGB(30, 30, 33),         -- subtle elevation
	Tertiary = Color3.fromRGB(38, 38, 42),          -- more contrast for panels/cards
	Accent = Color3.fromRGB(212, 175, 55),          -- **Real gold** color
	Text = Color3.fromRGB(255, 255, 255),           -- white for readability
	MutedText = Color3.fromRGB(200, 200, 200),      -- softer text
	Error = Color3.fromRGB(231, 76, 60),            -- same strong red
	Success = Color3.fromRGB(46, 204, 113),         -- vibrant green
	Warning = Color3.fromRGB(255, 215, 0),          -- bright gold-yellow warning
	Font = Enum.Font.BuilderSans,
	BoldFont = Enum.Font.BuilderSansBold,
	Radius = UDim.new(0, 8),
},
SGB = {
	Background = Color3.fromRGB(18, 18, 20),         -- Deep dark for suspenseful mood
	Secondary = Color3.fromRGB(30, 30, 34),          -- Slightly lighter dark for layering
	Tertiary = Color3.fromRGB(50, 50, 60),           -- Mid-tone for panels/effects
	Accent = Color3.fromRGB(255, 0, 110),            -- Bright neon pink (Squid Game uniforms)
	Text = Color3.fromRGB(255, 255, 255),            -- Pure white text
	MutedText = Color3.fromRGB(160, 160, 160),       -- Softened gray text for lesser emphasis
	Error = Color3.fromRGB(255, 45, 85),             -- Aggressive red-pink for error prompts
	Success = Color3.fromRGB(0, 220, 130),           -- Teal-green glow for success
	Warning = Color3.fromRGB(255, 210, 0),           -- Golden alert tone
	Font = Enum.Font.BuilderSans,                         -- Clean and modern font
	BoldFont = Enum.Font.BuilderSansBold,                 -- Bold version for headings/buttons
	Radius = UDim.new(0, 8),                         -- Balanced roundness
},
Roblox1 = {
	Background = Color3.fromRGB(17, 17, 28),          -- very dark navy
	Secondary = Color3.fromRGB(27, 27, 42),           -- slightly lighter for panels
	Tertiary = Color3.fromRGB(36, 36, 58),            -- for list items or inputs
	Accent = Color3.fromRGB(0, 120, 215),             -- Windows-style blue accent
	Text = Color3.fromRGB(235, 235, 245),             -- soft white for text
	MutedText = Color3.fromRGB(150, 150, 160),        -- muted gray text
	Error = Color3.fromRGB(255, 77, 77),              -- soft red
	Success = Color3.fromRGB(76, 175, 80),            -- green
	Warning = Color3.fromRGB(255, 193, 7),            -- yellowish warning

	-- ✅ Inter FontFace setup
	Font = Font.new("rbxassetid://12187365364", Enum.FontWeight.Medium, Enum.FontStyle.Normal),
	BoldFont = Font.new("rbxassetid://12187365364", Enum.FontWeight.Bold, Enum.FontStyle.Normal),

	Radius = UDim.new(0, 8),
},
Roblox5 = {
    Background = Color3.fromRGB(245, 245, 245), -- A light, neutral background
    Secondary = Color3.fromRGB(255, 255, 255), -- Pure white for elements that stand out
    Tertiary = Color3.fromRGB(230, 230, 230), -- Slightly darker for subtle variations
    Accent = Color3.fromRGB(0, 162, 255), -- Roblox's iconic bright blue
    Text = Color3.fromRGB(50, 50, 50), -- Dark grey for readability
    MutedText = Color3.fromRGB(120, 120, 120), -- Lighter grey for less prominent text
    Error = Color3.fromRGB(231, 76, 60), -- Standard red for errors
    Success = Color3.fromRGB(76, 209, 148), -- A brighter green for success (think "Robux green")
    Warning = Color3.fromRGB(255, 220, 0), -- A more vibrant yellow for warnings
    Font = Enum.Font.SourceSans, -- A common and readable Roblox font
    BoldFont = Enum.Font.SourceSansBold, -- Bold version for emphasis
    Radius = UDim.new(0, 6), -- Slightly less rounded corners, common in Roblox UI
},
Spy = {
	Background = Color3.fromRGB(16, 18, 22),        -- Deep black/blue
	Secondary = Color3.fromRGB(24, 27, 33),         -- Darker panels
	Tertiary = Color3.fromRGB(32, 36, 44),          -- Element backgrounds
	Accent = Color3.fromRGB(0, 255, 140),           -- Spy green (night-vision neon)
	Text = Color3.fromRGB(220, 255, 220),           -- Slightly green-tinted white
	MutedText = Color3.fromRGB(120, 140, 120),      -- Muted desaturated green
	Error = Color3.fromRGB(255, 70, 85),            -- Alert red
	Success = Color3.fromRGB(50, 255, 130),         -- Bright green for success
	Warning = Color3.fromRGB(255, 180, 50),         -- Amber warning
	Font = Enum.Font.SourceSans,                        -- Clean and modern spy feel
	BoldFont = Enum.Font.SourceSansBold,
	Radius = UDim.new(0, 6),                        -- Slightly tighter corners
}
	}
}
-- Default Theme
BuilderUI.ActiveTheme = BuilderUI.Config.Themes.Dark

--// UNIVERSAL & HELPER FUNCTIONS \\--

local tooltipGui -- Forward declare for the helper function

local function createUICorner(parent)
	local uic = Instance.new("UICorner")
	uic.CornerRadius = BuilderUI.ActiveTheme.Radius
	uic.Parent = parent
	return uic
end

local function tween(obj, props)
	local info = TweenInfo.new(
		BuilderUI.Config.Animation.Duration,
		BuilderUI.Config.Animation.EasingStyle,
		BuilderUI.Config.Animation.EasingDirection
	)
	return TweenService:Create(obj, info, props)
end

local function createTooltip(parent, text)
	if not text then return end

	local function showTooltip()
		if not tooltipGui or not tooltipGui.Parent then
			tooltipGui = Instance.new("ScreenGui", playerGui)
			tooltipGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
			tooltipGui.DisplayOrder = 999
			local frame = Instance.new("Frame", tooltipGui)
			frame.Name = "TooltipFrame"
			frame.BackgroundColor3 = Color3.new(0,0,0)
			frame.BackgroundTransparency = 0.4
			frame.BorderSizePixel = 0
			createUICorner(frame)
			local label = Instance.new("TextLabel", frame)
			label.Name = "TooltipLabel"
			label.BackgroundTransparency = 1
			label.Font = BuilderUI.ActiveTheme.Font
			label.TextSize = 14
			label.TextColor3 = Color3.new(1,1,1)
			label.Size = UDim2.fromOffset(0,0) -- Will be auto-sized
			label.AutomaticSize = Enum.AutomaticSize.XY
			local padding = Instance.new("UIPadding", frame)
			padding.PaddingTop = UDim.new(0, 4)
			padding.PaddingBottom = UDim.new(0, 4)
			padding.PaddingLeft = UDim.new(0, 8)
			padding.PaddingRight = UDim.new(0, 8)
		end
		
		local frame = tooltipGui.TooltipFrame
		local label = frame.TooltipLabel
		label.Text = text
		frame.Visible = true
	end
	
	local function hideTooltip()
		if tooltipGui and tooltipGui:FindFirstChild("TooltipFrame") then
			tooltipGui.TooltipFrame.Visible = false
		end
	end
	
	parent.MouseEnter:Connect(showTooltip)
	parent.MouseLeave:Connect(hideTooltip)

	-- Move tooltip with mouse
	if not playerGui:FindFirstChild("TooltipMover") then
		local moverScript = Instance.new("LocalScript", playerGui)
		moverScript.Name = "TooltipMover"
		RunService.RenderStepped:Connect(function()
			if tooltipGui and tooltipGui.TooltipFrame.Visible then
				local mousePos = UserInputService:GetMouseLocation()
				tooltipGui.TooltipFrame.Position = UDim2.fromOffset(mousePos.X + 15, mousePos.Y + 15)
			end
		end)
	end
end
function BuilderUI:IntroUI(iconId, titleText, subText)
	local theme = BuilderUI.ActiveTheme
	local player = game:GetService("Players").LocalPlayer

	local screenGui = Instance.new("ScreenGui")
	screenGui.Name = "IntroUI"
	screenGui.IgnoreGuiInset = true
	screenGui.ResetOnSpawn = false
	screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
	screenGui.Parent = player:WaitForChild("PlayerGui")

	-- Tween helper
	local function runTween(obj, props, time)
		local TweenService = game:GetService("TweenService")
		local info = TweenInfo.new(time or 0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
		local tween = TweenService:Create(obj, info, props)
		tween:Play()
	end

	-- UICorner helper
	local function applyCorner(ui, rad)
		local corner = Instance.new("UICorner")
		corner.CornerRadius = rad or theme.Radius
		corner.Parent = ui
	end

	-- Overlay
	local overlay = Instance.new("Frame", screenGui)
	overlay.Size = UDim2.new(1, 0, 1, 0)
	overlay.BackgroundColor3 = theme.Background
	overlay.BackgroundTransparency = 1

	-- Container
	local container = Instance.new("Frame", overlay)
	container.Size = UDim2.new(0, 360, 0, 240)
	container.Position = UDim2.new(0.5, -180, 1.5, 0)
	container.BackgroundColor3 = theme.Secondary
	container.BackgroundTransparency = 1
	container.ClipsDescendants = true
	applyCorner(container)

	-- Icon
	local icon = Instance.new("ImageLabel", container)
	icon.Size = UDim2.new(0, 80, 0, 80)
	icon.Position = UDim2.new(0.5, -40, 0.5, -80)
	icon.BackgroundColor3 = theme.Tertiary
	if typeof(iconId) == "string" and iconId:sub(1, 10) == "rbxthumb://" then
	icon.Image = iconId
else
	icon.Image = "rbxassetid://" .. tostring(iconId or 91247441190501)
end
	icon.BackgroundTransparency = 0
	icon.ScaleType = Enum.ScaleType.Fit
	applyCorner(icon, UDim.new(0, 10))

	-- Title
	local title = Instance.new("TextLabel", container)
	title.Size = UDim2.new(1, -40, 0, 28)
	title.Position = UDim2.new(0, 20, 0.5, 30)
	title.Font = theme.BoldFont
	title.TextSize = 20
	title.TextColor3 = theme.Text
	title.BackgroundTransparency = 1
	title.TextXAlignment = Enum.TextXAlignment.Center
	title.Text = titleText or "Welcome to BuilderUI"

	-- Subtext
	local subtextLabel = Instance.new("TextLabel", container)
	subtextLabel.Size = UDim2.new(1, -40, 0, 22)
	subtextLabel.Position = UDim2.new(0, 20, 0.5, 70)
	subtextLabel.Font = theme.Font
	subtextLabel.TextSize = 14
	subtextLabel.TextColor3 = theme.MutedText
	subtextLabel.BackgroundTransparency = 1
	subtextLabel.TextXAlignment = Enum.TextXAlignment.Center
	subtextLabel.Text = subText or "Please wait while the script loads..."

	-- Slide + Fade in
	runTween(overlay, {BackgroundTransparency = 0.7}, 0.5)
	runTween(container, {
		Position = UDim2.new(0.5, -180, 0.5, -120),
		BackgroundTransparency = 0
	}, 0.5)

	task.wait(3)

	-- Slide + Fade out
	runTween(container, {
		Position = UDim2.new(0.5, -180, 1.5, 0),
		BackgroundTransparency = 1
	}, 0.5)
	runTween(overlay, {BackgroundTransparency = 1}, 0.5)

	task.wait(0.5)
	screenGui:Destroy()
end
function BuilderUI:SetTheme(themeName)
	if BuilderUI.Config.Themes[themeName] then
		self.ActiveTheme = self.Config.Themes[themeName]
	else
		warn("BuilderUI: Theme '"..tostring(themeName).."' not found.")
	end
end

--// NOTIFICATION SYSTEM \\--

local function createNotification(type, title, text, duration, icon)
	duration = duration or 5
	local theme = BuilderUI.ActiveTheme
	local typeInfo = {
		Default = { Color = theme.Accent, Icon = icon or "🔔" },
		Success = { Color = theme.Success, Icon = icon or "✅" },
		Warning = { Color = theme.Warning, Icon = icon or "⚠️" },
		Error = { Color = theme.Error, Icon = icon or "❌" },
	}
	local info = typeInfo[type] or typeInfo.Default

	local screenGui = playerGui:FindFirstChild("BuilderUI_Notifications")
	if not screenGui then
		screenGui = Instance.new("ScreenGui", playerGui)
		screenGui.Name = "BuilderUI_Notifications"
		screenGui.ZIndexBehavior = Enum.ZIndexBehavior.Global
		screenGui.IgnoreGuiInset = true
		local listLayout = Instance.new("UIListLayout", screenGui)
		listLayout.Padding = UDim.new(0, 8)
		listLayout.HorizontalAlignment = Enum.HorizontalAlignment.Right
		listLayout.VerticalAlignment = Enum.VerticalAlignment.Bottom
		listLayout.SortOrder = Enum.SortOrder.LayoutOrder
	end

	local notifyFrame = Instance.new("Frame", screenGui)
	notifyFrame.Size = UDim2.new(0, 300, 0, 65)
	notifyFrame.Position = UDim2.new(1, 320, 1, -10) -- Start off-screen
	notifyFrame.BackgroundColor3 = theme.Secondary
	notifyFrame.AnchorPoint = Vector2.new(1, 1)
	createUICorner(notifyFrame)

	local colorStripe = Instance.new("Frame", notifyFrame)
	colorStripe.Size = UDim2.new(0, 5, 1, 0)
	colorStripe.BackgroundColor3 = info.Color
	colorStripe.BorderSizePixel = 0
	createUICorner(colorStripe)

	local iconContainer = Instance.new("Frame", notifyFrame)
	iconContainer.Size = UDim2.new(0, 32, 0, 32)
	iconContainer.Position = UDim2.new(0, 20, 0.5, -16)
	iconContainer.BackgroundTransparency = 1

	if type(info.Icon) == "string" and string.sub(info.Icon, 1, 13) == "rbxassetid://" then
		local iconImage = Instance.new("ImageLabel", iconContainer)
		iconImage.Size = UDim2.fromScale(1, 1)
		iconImage.BackgroundTransparency = 1
		iconImage.Image = info.Icon
		iconImage.ImageColor3 = info.Color
	else
		local iconLabel = Instance.new("TextLabel", iconContainer)
		iconLabel.Size = UDim2.fromScale(1, 1)
		iconLabel.BackgroundTransparency = 1
		iconLabel.Font = theme.Font
		iconLabel.TextScaled = true
		iconLabel.TextColor3 = info.Color
		iconLabel.Text = info.Icon
	end

	local titleLabel = Instance.new("TextLabel", notifyFrame)
	titleLabel.Size = UDim2.new(1, -70, 0, 20)
	titleLabel.Position = UDim2.new(0, 60, 0, 10)
	titleLabel.Font = theme.BoldFont
	titleLabel.TextSize = 16
	titleLabel.TextColor3 = theme.Text
	titleLabel.BackgroundTransparency = 1
	titleLabel.TextXAlignment = Enum.TextXAlignment.Left
	titleLabel.Text = title

	local textLabel = Instance.new("TextLabel", notifyFrame)
	textLabel.Size = UDim2.new(1, -70, 0, 20)
	textLabel.Position = UDim2.new(0, 60, 0, 32)
	textLabel.Font = theme.Font
	textLabel.TextSize = 14
	textLabel.TextColor3 = theme.MutedText
	textLabel.BackgroundTransparency = 1
	textLabel.TextXAlignment = Enum.TextXAlignment.Left
	textLabel.Text = text

	local progressBar = Instance.new("Frame", notifyFrame)
	progressBar.Position = UDim2.new(0,0,1,0)
	progressBar.Size = UDim2.new(1, 0, 0, 3)
	progressBar.AnchorPoint = Vector2.new(0, 1)
	progressBar.BackgroundColor3 = info.Color
	progressBar.BorderSizePixel = 0

	tween(notifyFrame, { Position = UDim2.new(1, -10, 1, -10) }):Play()
	tween(progressBar, { Size = UDim2.new(0, 0, 0, 3) }, TweenInfo.new(duration, Enum.EasingStyle.Linear)):Play()

	task.delay(duration, function()
		if not notifyFrame or not notifyFrame.Parent then return end
		tween(notifyFrame, { Position = UDim2.new(1, 320, 1, -10) }):Play()
		task.wait(BuilderUI.Config.Animation.Duration)
		notifyFrame:Destroy()
	end)
end

function BuilderUI:Notify(...) createNotification("Default", ...) end
function BuilderUI:NotifySuccess(...) createNotification("Success", ...) end
function BuilderUI:NotifyWarning(...) createNotification("Warning", ...) end
function BuilderUI:NotifyError(...) createNotification("Error", ...) end
function BuilderUI:CreateWindow(titleText)
	local player = game:GetService("Players").LocalPlayer
	local playerGui = player:WaitForChild("PlayerGui")
	local tweenService = game:GetService("TweenService")

	local gui = Instance.new("ScreenGui", playerGui)
	gui.Name = "BuilderUI_" .. titleText:gsub("%s+", "")
	gui.ZIndexBehavior = Enum.ZIndexBehavior.Global
	gui.ResetOnSpawn = false

	local tweenInfo = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

	-- Helper function to fade in all UI elements
	local function fadeInDescendants(parent)
		for _, desc in ipairs(parent:GetDescendants()) do
			if desc:IsA("TextLabel") or desc:IsA("TextButton") then
				desc.TextTransparency = 1
				tweenService:Create(desc, tweenInfo, {TextTransparency = 0}):Play()
			elseif desc:IsA("Frame") or desc:IsA("ImageLabel") then
				desc.BackgroundTransparency = 1
				tweenService:Create(desc, tweenInfo, {BackgroundTransparency = 0}):Play()
			end
		end
	end

	local frame = Instance.new("Frame")
	frame.Size = UDim2.new(0, 600, 0, 400)
	frame.Position = UDim2.new(0.5, -300, 0.45, -200)
	frame.BackgroundColor3 = BuilderUI.ActiveTheme.Background
	frame.BackgroundTransparency = 1
	frame.Active = true
	frame.Draggable = true
	frame.ClipsDescendants = true
	frame.Parent = gui

	local corner = Instance.new("UICorner")
	corner.CornerRadius = UDim.new(0, 16)
	corner.Parent = frame

	-- Header
	local header = Instance.new("Frame", frame)
	header.Size = UDim2.new(1, 0, 0, 36)
	header.BackgroundColor3 = BuilderUI.ActiveTheme.Secondary
	header.BackgroundTransparency = 1

	local headerCorner = Instance.new("UICorner")
	headerCorner.CornerRadius = UDim.new(0, 16)
	headerCorner.Parent = header

	local title = Instance.new("TextLabel", header)
	title.Size = UDim2.new(1, -80, 1, 0)
	title.Position = UDim2.new(0, 12, 0, 0)
	title.Text = titleText
	title.Font = BuilderUI.ActiveTheme.BoldFont
	title.TextSize = 16
	title.TextColor3 = BuilderUI.ActiveTheme.Text
	title.TextTransparency = 1
	title.TextXAlignment = Enum.TextXAlignment.Left
	title.BackgroundTransparency = 1

	local close = Instance.new("TextButton", header)
	close.Size = UDim2.new(0, 24, 0, 24)
	close.Position = UDim2.new(1, -32, 0.5, -12)
	close.Text = "x"
	close.Font = BuilderUI.ActiveTheme.Font
	close.TextSize = 16
	close.TextColor3 = BuilderUI.ActiveTheme.MutedText
	close.TextTransparency = 1
	close.BackgroundTransparency = 1
	createTooltip(close, "Close")
	close.MouseButton1Click:Connect(function()
		tweenService:Create(frame, tweenInfo, {
			Position = UDim2.new(0.5, -300, 0.45, -200),
			BackgroundTransparency = 1
		}):Play()
		task.wait(BuilderUI.Config.Animation.Duration)
		gui:Destroy()
	end)
	close.MouseEnter:Connect(function()
		tweenService:Create(close, tweenInfo, {TextColor3 = BuilderUI.ActiveTheme.Error}):Play()
	end)
	close.MouseLeave:Connect(function()
		tweenService:Create(close, tweenInfo, {TextColor3 = BuilderUI.ActiveTheme.MutedText}):Play()
	end)

	local minimize = Instance.new("TextButton", header)
	minimize.Size = UDim2.new(0, 24, 0, 24)
	minimize.Position = UDim2.new(1, -56, 0.5, -12)
	minimize.Text = "—"
	minimize.Font = BuilderUI.ActiveTheme.Font
	minimize.TextSize = 16
	minimize.TextColor3 = BuilderUI.ActiveTheme.MutedText
	minimize.TextTransparency = 1
	minimize.BackgroundTransparency = 1
	createTooltip(minimize, "Minimize")
	minimize.MouseEnter:Connect(function()
		tweenService:Create(minimize, tweenInfo, {TextColor3 = BuilderUI.ActiveTheme.Text}):Play()
	end)
	minimize.MouseLeave:Connect(function()
		tweenService:Create(minimize, tweenInfo, {TextColor3 = BuilderUI.ActiveTheme.MutedText}):Play()
	end)

	local sidebar = Instance.new("Frame", frame)
	sidebar.Size = UDim2.new(0, 150, 1, -36)
	sidebar.Position = UDim2.new(0, 0, 0, 36)
	sidebar.BackgroundColor3 = BuilderUI.ActiveTheme.Background
	sidebar.BackgroundTransparency = 1

	local sidebarCorner = Instance.new("UICorner")
	sidebarCorner.CornerRadius = UDim.new(0, 16)
	sidebarCorner.Parent = sidebar

	local sidebarLayout = Instance.new("UIListLayout", sidebar)
	sidebarLayout.Padding = UDim.new(0, 5)
	sidebarLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
	sidebarLayout.VerticalAlignment = Enum.VerticalAlignment.Top
	sidebarLayout.SortOrder = Enum.SortOrder.LayoutOrder

	local sidebarPadding = Instance.new("UIPadding", sidebar)
	sidebarPadding.PaddingTop = UDim.new(0, 10)

	local tabContentHolder = Instance.new("Frame", frame)
	tabContentHolder.Size = UDim2.new(1, -165, 1, -46)
	tabContentHolder.Position = UDim2.new(0, 155, 0, 41)
	tabContentHolder.BackgroundTransparency = 1

	local originalSize = frame.Size
	local isMinimized = false
	minimize.MouseButton1Click:Connect(function()
		isMinimized = not isMinimized
		sidebar.Visible = not isMinimized
		tabContentHolder.Visible = not isMinimized
		if isMinimized then
			tweenService:Create(frame, tweenInfo, {Size = UDim2.new(originalSize.X.Scale, originalSize.X.Offset, 0, 36)}):Play()
		else
			tweenService:Create(frame, tweenInfo, {Size = originalSize}):Play()
		end
	end)

	-- Animate frame and its children together
	tweenService:Create(frame, tweenInfo, {
		Position = UDim2.new(0.5, -300, 0.5, -200),
		BackgroundTransparency = 0
	}):Play()
	fadeInDescendants(frame)

	return frame, sidebar, tabContentHolder
end

-- Tabs API Setup
local tabs = {}
local tabButtons = {}
local api = {}
local currentActiveTab = nil

local function setActiveTab(tabName)
	if currentActiveTab == tabName then return end
	for name, tabData in pairs(tabs) do
		local isVisible = (name == tabName)
		tabData.Content.Visible = isVisible
		if tabButtons[name] then
			tween(tabButtons[name], {
				BackgroundColor3 = isVisible and BuilderUI.ActiveTheme.Accent or BuilderUI.ActiveTheme.Tertiary,
			}):Play()
			if tabButtons[name]:IsA("TextButton") then
				tween(tabButtons[name], {
					TextColor3 = isVisible and BuilderUI.ActiveTheme.Text or BuilderUI.ActiveTheme.MutedText
				}):Play()
			end
		end
	end
	currentActiveTab = tabName
end

	function api:CreateTab(name, icon)
	local tab = {}

	local tabButton = Instance.new("TextButton", sidebar)
	tabButton.Size = UDim2.new(1, -10, 0, 34)
	tabButton.BackgroundColor3 = BuilderUI.ActiveTheme.Tertiary
	tabButton.Text = ""
	tabButton.BorderSizePixel = 0
	createUICorner(tabButton, BuilderUI.ActiveTheme.Radius.Offset or 8)

	local iconOffset = 0

	if icon then
		iconOffset = 30 -- make space for the icon + spacing

		-- Icon box (background for icon)
		local iconContainerBox = Instance.new("Frame", tabButton)
		iconContainerBox.Size = UDim2.new(0, 22, 0, 22)
		iconContainerBox.Position = UDim2.new(0, 8, 0.5, -11)
		iconContainerBox.BackgroundColor3 = BuilderUI.ActiveTheme.Secondary
		iconContainerBox.BackgroundTransparency = 0
		iconContainerBox.BorderSizePixel = 0
		createUICorner(iconContainerBox, 6)

		-- Insert actual icon
		if type(icon) == "string" and string.sub(icon, 1, 13) == "rbxassetid://" then
			local iconImg = Instance.new("ImageLabel", iconContainerBox)
			iconImg.Size = UDim2.fromScale(1, 1)
			iconImg.BackgroundTransparency = 1
			iconImg.Image = icon
			iconImg.ScaleType = Enum.ScaleType.Fit
		else
			local iconLabel = Instance.new("TextLabel", iconContainerBox)
			iconLabel.Size = UDim2.fromScale(1, 1)
			iconLabel.BackgroundTransparency = 1
			iconLabel.Font = BuilderUI.ActiveTheme.Font
			iconLabel.TextScaled = true
			iconLabel.TextColor3 = BuilderUI.ActiveTheme.MutedText
			iconLabel.Text = icon
			iconLabel.TextXAlignment = Enum.TextXAlignment.Center
			iconLabel.TextYAlignment = Enum.TextYAlignment.Center
		end
	end

	-- Text label inside the button
	local tabLabel = Instance.new("TextLabel", tabButton)
	tabLabel.Size = UDim2.new(1, -iconOffset - 12, 1, 0)
	tabLabel.Position = UDim2.new(0, iconOffset + 8, 0, 0)
	tabLabel.BackgroundTransparency = 1
	tabLabel.Text = name
	tabLabel.Font = BuilderUI.ActiveTheme.Font
	tabLabel.TextSize = 16
	tabLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
	tabLabel.TextXAlignment = Enum.TextXAlignment.Left
	tabLabel.TextYAlignment = Enum.TextYAlignment.Center

	-- Tab content container
	local tabContent = Instance.new("ScrollingFrame", tabContentHolder)
	tabContent.Name = name .. "_Content"
	tabContent.Size = UDim2.new(1, 0, 1, 0)
	tabContent.BackgroundTransparency = 1
	tabContent.Visible = false
	tabContent.AutomaticCanvasSize = Enum.AutomaticSize.Y
	tabContent.CanvasSize = UDim2.new()
	tabContent.ScrollBarImageColor3 = BuilderUI.ActiveTheme.Accent
	tabContent.ScrollBarThickness = 4
	tabContent.ClipsDescendants = true

	local layout = Instance.new("UIListLayout", tabContent)
	layout.Padding = UDim.new(0, 8)
	layout.SortOrder = Enum.SortOrder.LayoutOrder

	Instance.new("UIPadding", tabContent).PaddingRight = UDim.new(0, 6)

	-- Save tab references
	tabs[name] = { Content = tabContent }
	tabButtons[name] = tabButton

	-- Tab switching
	tabButton.MouseButton1Click:Connect(function()
		setActiveTab(name)
	end)

	if not currentActiveTab then
		setActiveTab(name)
	end
		
		-- Component Functions --
		function tab:AddSection(title)
			local container = Instance.new("Frame", tabContent)
			container.Size = UDim2.new(1, 0, 0, 24)
			container.BackgroundTransparency = 1
			local label = Instance.new("TextLabel", container)
			label.Size = UDim2.new(1, 0, 1, 0)
			label.Text = title
			label.Font = BuilderUI.ActiveTheme.BoldFont
			label.TextSize = 18
			label.TextColor3 = BuilderUI.ActiveTheme.Text
			label.BackgroundTransparency = 1
			label.TextXAlignment = Enum.TextXAlignment.Left
		end
		
		function tab:AddButton(text, callback, tooltipText)
	local btn = Instance.new("TextButton", tabContent)
	btn.Size = UDim2.new(1, 0, 0, 36)
	btn.Text = text or "Button"
	btn.Font = BuilderUI.ActiveTheme.Font
	btn.TextSize = 16
	btn.TextColor3 = BuilderUI.ActiveTheme.Text
	btn.BackgroundColor3 = BuilderUI.ActiveTheme.Tertiary
	btn.AutoButtonColor = false
	btn.ClipsDescendants = true

	createUICorner(btn)
	if tooltipText then
		createTooltip(btn, tooltipText)
	end

	local originalColor = btn.BackgroundColor3

	btn.MouseEnter:Connect(function()
		tween(btn, { BackgroundColor3 = originalColor:Lerp(Color3.new(1, 1, 1), 0.1) }):Play()
	end)

	btn.MouseLeave:Connect(function()
		tween(btn, { BackgroundColor3 = originalColor }):Play()
	end)

	btn.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
			local x, y
			-- Try to get input position
			if typeof(input.Position) == "Vector3" then
				x, y = input.Position.X, input.Position.Y
			elseif typeof(input.Position) == "Vector2" then
				x, y = input.Position.X, input.Position.Y
			else
				-- fallback to mouse location
				local mouse = game:GetService("UserInputService"):GetMouseLocation()
				x, y = mouse.X, mouse.Y
			end

			if not (x and y) then return end

			local ripple = Instance.new("Frame")
			ripple.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
			ripple.BackgroundTransparency = 0.6
			ripple.Size = UDim2.new(0, 0, 0, 0)
			ripple.AnchorPoint = Vector2.new(0.5, 0.5)
			ripple.ZIndex = 10
			ripple.ClipsDescendants = true

			local absPos = btn.AbsolutePosition
			ripple.Position = UDim2.new(0, x - absPos.X, 0, y - absPos.Y)
			ripple.Parent = btn

			createUICorner(ripple)

			tween(ripple, {
				Size = UDim2.new(0, btn.AbsoluteSize.X * 2, 0, btn.AbsoluteSize.X * 2),
				BackgroundTransparency = 1
			}, 0.5):Play()

			game:GetService("Debris"):AddItem(ripple, 0.6)
		end
	end)

	btn.MouseButton1Click:Connect(function()
		tween(btn, { BackgroundColor3 = BuilderUI.ActiveTheme.Accent }):Play()
		task.wait(0.1)
		tween(btn, { BackgroundColor3 = originalColor }):Play()

		if typeof(callback) == "function" then
			task.spawn(function()
				local success, err = pcall(callback)
				if not success then
					warn("[AddButton] Callback error:", err)
				end
			end)
		else
			warn("[AddButton] Callback is not a function:", typeof(callback))
		end
	end)

	return btn
end
		function tab:AddToggle(text, callback, default, tooltipText)
			local toggled = default or false
			local container = Instance.new("Frame", tabContent)
			container.Size = UDim2.new(1, 0, 0, 32)
			container.BackgroundTransparency = 1
			createTooltip(container, tooltipText)
			local label = Instance.new("TextLabel", container)
			label.Size = UDim2.new(1, -65, 1, 0)
			label.Font = BuilderUI.ActiveTheme.Font
			label.TextSize = 16
			label.TextColor3 = BuilderUI.ActiveTheme.Text
			label.Text = text
			label.TextXAlignment = Enum.TextXAlignment.Left
			label.BackgroundTransparency = 1
			local toggleButton = Instance.new("TextButton", container)
			toggleButton.Size = UDim2.new(0, 50, 0, 24)
			toggleButton.Position = UDim2.new(1, -50, 0.5, -12)
			toggleButton.Text = ""
			createUICorner(toggleButton, UDim.new(0, 12))
			local knob = Instance.new("Frame", toggleButton)
			knob.Size = UDim2.new(0, 18, 0, 18)
			knob.BackgroundColor3 = Color3.new(1, 1, 1)
			knob.BorderSizePixel = 0
			createUICorner(knob, UDim.new(0, 9))
			local function updateToggleState(isToggled, instant)
				local duration = instant and 0 or nil
				local bgColor = isToggled and BuilderUI.ActiveTheme.Accent or BuilderUI.ActiveTheme.Tertiary
				local knobPos = isToggled and UDim2.new(1, -21, 0.5, -9) or UDim2.new(0, 3, 0.5, -9)
				local t1 = tween(toggleButton, { BackgroundColor3 = bgColor }, duration)
				local t2 = tween(knob, { Position = knobPos }, duration)
				t1:Play()
				t2:Play()
			end
			updateToggleState(toggled, true)
			toggleButton.MouseButton1Click:Connect(function()
				toggled = not toggled
				updateToggleState(toggled)
				if callback then spawn(function() pcall(callback, toggled) end) end
			end)
		end
		function tab:AddColorPicker10(text, callback, defaultColor, tooltipText)
    local container = Instance.new("Frame", tabContent)
    container.BackgroundTransparency = 1
    container.ZIndex = 2
    container.Size = UDim2.new(1, 0, 0, 200)
    createTooltip(container, tooltipText)

    -- Label  
    local label = Instance.new("TextLabel", container)
    label.Size = UDim2.new(1, 0, 0, 20)
    label.Position = UDim2.new(0, 0, 0, 0)
    label.Font = BuilderUI.ActiveTheme.Font
    label.TextSize = 16
    label.TextColor3 = BuilderUI.ActiveTheme.Text
    label.Text = text .. ": " .. (defaultColor or "FF0000")
    label.BackgroundTransparency = 1
    label.TextXAlignment = Enum.TextXAlignment.Left

    -- Color Preview  
    local preview = Instance.new("Frame", container)
    preview.Size = UDim2.new(0, 20, 0, 20)
    preview.Position = UDim2.new(1, -25, 0, 0)
    preview.BackgroundColor3 = defaultColor and Color3.fromHex(defaultColor) or Color3.fromRGB(255, 0, 0)
    createUICorner(preview)

    -- Saturation/Brightness grid  
    local satBright = Instance.new("ImageButton", container)
    satBright.Position = UDim2.new(0, 0, 0, 30)
    satBright.Size = UDim2.new(1, 0, 0, 130)
    satBright.BackgroundColor3 = Color3.fromHSV(0, 1, 1)
    satBright.Image = "rbxassetid://6020299385"
    satBright.ScaleType = Enum.ScaleType.Stretch
    createUICorner(satBright)

    -- SatBright pointer  
    local sbPointer = Instance.new("Frame", satBright)
    sbPointer.Size = UDim2.new(0, 6, 0, 6)
    sbPointer.BackgroundColor3 = Color3.new(1, 1, 1)
    sbPointer.AnchorPoint = Vector2.new(0.5, 0.5)
    sbPointer.BorderSizePixel = 0
    createUICorner(sbPointer)

    -- Hue selector bar  
    local hueBar = Instance.new("ImageButton", container)
    hueBar.Position = UDim2.new(0, 0, 0, 170)
    hueBar.Size = UDim2.new(1, 0, 0, 20)
    hueBar.Image = "rbxassetid://6020299388"
    hueBar.BackgroundTransparency = 1
    hueBar.ScaleType = Enum.ScaleType.Stretch
    createUICorner(hueBar)

    -- Hue pointer  
    local huePointer = Instance.new("Frame", hueBar)
    huePointer.Size = UDim2.new(0, 4, 1, 0)
    huePointer.BackgroundColor3 = Color3.new(1, 1, 1)
    huePointer.AnchorPoint = Vector2.new(0.5, 0)
    huePointer.BorderSizePixel = 0
    createUICorner(huePointer)

    local selectedHue, selectedS, selectedV = 0, 1, 1

    local function updatePointers()
        sbPointer.Position = UDim2.new(selectedS, 0, 1 - selectedV, 0)
        huePointer.Position = UDim2.new(selectedHue, 0, 0, 0)
    end

    local function updateColor()
        local color = Color3.fromHSV(selectedHue, selectedS, selectedV)
        local hex = color:ToHex():gsub("#", "")
        preview.BackgroundColor3 = color
        label.Text = text .. ": " .. hex
        if callback then
            pcall(callback, hex)
        end
    end

    local function handleHueInput(pos)
        local relX = math.clamp((pos.X - hueBar.AbsolutePosition.X) / hueBar.AbsoluteSize.X, 0, 1)
        selectedHue = relX
        huePointer.Position = UDim2.new(selectedHue, 0, 0, 0)
        satBright.BackgroundColor3 = Color3.fromHSV(selectedHue, 1, 1)
        updateColor()
    end

    local function handleSatBrightInput(pos)
        local rel = pos - satBright.AbsolutePosition
        selectedS = math.clamp(rel.X / satBright.AbsoluteSize.X, 0, 1)
        selectedV = 1 - math.clamp(rel.Y / satBright.AbsoluteSize.Y, 0, 1)
        sbPointer.Position = UDim2.new(selectedS, 0, 1 - selectedV, 0)
        updateColor()
    end

    -- Input handling for both mobile and PC
    local userInput = game:GetService("UserInputService")
    local draggingSB, draggingHue = false, false

    hueBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            draggingHue = true
            handleHueInput(input.Position)
        end
    end)

    satBright.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            draggingSB = true
            handleSatBrightInput(input.Position)
        end
    end)

    userInput.InputChanged:Connect(function(input)
        if draggingSB and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            handleSatBrightInput(input.Position)
        elseif draggingHue and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            handleHueInput(input.Position)
        end
    end)

    userInput.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            draggingSB = false
            draggingHue = false
        end
    end)

    -- Set default color
    if defaultColor then
        local color = Color3.fromHex(defaultColor)
        selectedHue, selectedS, selectedV = color:ToHSV()
        satBright.BackgroundColor3 = Color3.fromHSV(selectedHue, 1, 1)
        updateColor()
        updatePointers()
    else
        updatePointers()
    end
end
		function tab:AddSlider(text, min, max, start, callback, tooltipText)
			local container = Instance.new("Frame", tabContent)
			container.Size = UDim2.new(1, 0, 0, 48)
			container.BackgroundTransparency = 1
			createTooltip(container, tooltipText)
			local label = Instance.new("TextLabel", container)
			label.Size = UDim2.new(0.7, 0, 0, 20)
			label.Font = BuilderUI.ActiveTheme.Font
			label.TextSize = 16
			label.TextColor3 = BuilderUI.ActiveTheme.Text
			label.Text = text
			label.TextXAlignment = Enum.TextXAlignment.Left
			label.BackgroundTransparency = 1
			local valueLabel = Instance.new("TextLabel", container)
			valueLabel.Size = UDim2.new(0.3, -5, 0, 20)
			valueLabel.Position = UDim2.new(0.7, 5, 0, 0)
			valueLabel.Font = BuilderUI.ActiveTheme.Font
			valueLabel.TextSize = 14
			valueLabel.TextColor3 = BuilderUI.ActiveTheme.MutedText
			valueLabel.Text = tostring(start)
			valueLabel.TextXAlignment = Enum.TextXAlignment.Right
			valueLabel.BackgroundTransparency = 1
			local sliderBar = Instance.new("Frame", container)
			sliderBar.Size = UDim2.new(1, 0, 0, 8)
			sliderBar.Position = UDim2.new(0, 0, 0, 28)
			sliderBar.BackgroundColor3 = BuilderUI.ActiveTheme.Tertiary
			createUICorner(sliderBar, UDim.new(0, 4))
			local fillBar = Instance.new("Frame", sliderBar)
			fillBar.BackgroundColor3 = BuilderUI.ActiveTheme.Accent
			createUICorner(fillBar, UDim.new(0, 4))
			local thumb = Instance.new("Frame", sliderBar)
			thumb.Size = UDim2.new(0, 16, 0, 16)
			thumb.Position = UDim2.new(0, -8, 0.5, -8)
			thumb.BackgroundColor3 = BuilderUI.ActiveTheme.Text
			createUICorner(thumb, UDim.new(0, 8))
			thumb.Active = true
			local function updateSlider(value, fromInput)
				local percentage = (value - min) / (max - min)
				percentage = math.clamp(percentage, 0, 1)
				fillBar.Size = UDim2.new(percentage, 0, 1, 0)
				thumb.Position = UDim2.new(percentage, -8, 0.5, -8)
				valueLabel.Text = string.format("%.2f", value)
				if fromInput and callback then spawn(function() pcall(callback, value) end) end
			end
			updateSlider(start)
			thumb.InputBegan:Connect(function(input)
				if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
					local moveConn, releaseConn
					moveConn = UserInputService.InputChanged:Connect(function(inputChanged)
						if inputChanged.UserInputType == Enum.UserInputType.MouseMovement or inputChanged.UserInputType == Enum.UserInputType.Touch then
							local mousePos = UserInputService:GetMouseLocation()
							local relativePos = mousePos.X - sliderBar.AbsolutePosition.X
							local percentage = math.clamp(relativePos / sliderBar.AbsoluteSize.X, 0, 1)
							local value = min + (max - min) * percentage
							updateSlider(value, true)
						end
					end)
					releaseConn = UserInputService.InputEnded:Connect(function(inputEnded)
						if inputEnded.UserInputType == Enum.UserInputType.MouseButton1 or inputEnded.UserInputType == Enum.UserInputType.Touch then
							moveConn:Disconnect()
							releaseConn:Disconnect()
						end
					end)
				end
			end)
		end
        function tab:AddColorPicker9(text, defaultHex, callback, tooltipText)
	local container = Instance.new("Frame", tabContent)
	container.BackgroundTransparency = 1
	container.Size = UDim2.new(1, 0, 0, 36)
	createTooltip(container, tooltipText)

	-- Button that opens the color picker
	local openButton = Instance.new("TextButton", container)
	openButton.Size = UDim2.new(1, 0, 0, 36)
	openButton.Text = text or "Pick Color"
	openButton.Font = BuilderUI.ActiveTheme.Font
	openButton.TextSize = 16
	openButton.TextColor3 = BuilderUI.ActiveTheme.Text
	openButton.BackgroundColor3 = BuilderUI.ActiveTheme.Tertiary
	createUICorner(openButton)

	-- Color Picker Popup
	local picker = Instance.new("Frame")
	picker.Visible = false
	picker.Size = UDim2.new(0, 300, 0, 340)
	picker.Position = UDim2.new(0, 0, 0, 40)
	picker.BackgroundColor3 = Color3.fromRGB(34, 34, 34)
	picker.ZIndex = 10
	createUICorner(picker)
	picker.Parent = container

	local title = Instance.new("TextLabel", picker)
	title.Text = "Color"
	title.Size = UDim2.new(1, 0, 0, 30)
	title.BackgroundTransparency = 1
	title.TextColor3 = Color3.new(1, 1, 1)
	title.Font = Enum.Font.GothamMedium
	title.TextSize = 16

	local colorWheel = Instance.new("ImageLabel", picker)
	colorWheel.Size = UDim2.new(0, 160, 0, 160)
	colorWheel.Position = UDim2.new(0, 10, 0, 30)
	colorWheel.BackgroundTransparency = 1
	colorWheel.Image = "rbxassetid://6020299385" -- Color wheel texture

	local brightnessSlider = Instance.new("Frame", picker)
	brightnessSlider.Size = UDim2.new(0, 20, 0, 160)
	brightnessSlider.Position = UDim2.new(0, 180, 0, 30)
	brightnessSlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
	createUICorner(brightnessSlider)

	local preview = Instance.new("Frame", picker)
	preview.Size = UDim2.new(0, 30, 0, 30)
	preview.Position = UDim2.new(0, 10, 0, 200)
	preview.BackgroundColor3 = Color3.fromHex(defaultHex or "#ffffff")
	createUICorner(preview)

	local hexBox = Instance.new("TextBox", picker)
	hexBox.PlaceholderText = "#ffffff"
	hexBox.Text = defaultHex or "#87d7ff"
	hexBox.Size = UDim2.new(0, 120, 0, 30)
	hexBox.Position = UDim2.new(0, 50, 0, 200)
	hexBox.BackgroundColor3 = BuilderUI.ActiveTheme.Secondary
	hexBox.TextColor3 = Color3.new(1, 1, 1)
	hexBox.Font = Enum.Font.Gotham
	hexBox.TextSize = 14
	createUICorner(hexBox)

	local confirm = Instance.new("TextButton", picker)
	confirm.Text = "✔"
	confirm.Size = UDim2.new(0, 30, 0, 30)
	confirm.Position = UDim2.new(0, 180, 0, 200)
	confirm.BackgroundColor3 = Color3.fromRGB(50, 200, 100)
	confirm.TextColor3 = Color3.new(1, 1, 1)
	confirm.Font = Enum.Font.GothamBold
	confirm.TextSize = 18
	createUICorner(confirm)

	local cancel = Instance.new("TextButton", picker)
	cancel.Text = "✖"
	cancel.Size = UDim2.new(0, 30, 0, 30)
	cancel.Position = UDim2.new(0, 220, 0, 200)
	cancel.BackgroundColor3 = Color3.fromRGB(200, 50, 50)
	cancel.TextColor3 = Color3.new(1, 1, 1)
	cancel.Font = Enum.Font.GothamBold
	cancel.TextSize = 18
	createUICorner(cancel)

	local function updatePreview(hex)
		preview.BackgroundColor3 = Color3.fromHex(hex)
		hexBox.Text = hex
	end

	openButton.MouseButton1Click:Connect(function()
		picker.Visible = not picker.Visible
	end)

	confirm.MouseButton1Click:Connect(function()
		picker.Visible = false
		local color = Color3.fromHex(hexBox.Text)
		preview.BackgroundColor3 = color
		if callback then
			callback(color)
		end
	end)

	cancel.MouseButton1Click:Connect(function()
		picker.Visible = false
	end)

	hexBox.FocusLost:Connect(function()
		local hex = hexBox.Text:gsub("#", "")
		if #hex == 6 then
			updatePreview("#" .. hex)
		end
	end)
end
        function tab:AddTextbox(text, placeholder, callback, tooltipText)
    -- Create the container for the textbox
    local container = Instance.new("Frame", tabContent)
    container.BackgroundTransparency = 1
    container.Size = UDim2.new(1, 0, 0, 36)
    container.ZIndex = 2
    createTooltip(container, tooltipText)

    -- Create the textbox background
    local textboxBg = Instance.new("Frame", container)
    textboxBg.Size = UDim2.new(1, 0, 0, 36)
    textboxBg.BackgroundColor3 = BuilderUI.ActiveTheme.Tertiary
    createUICorner(textboxBg)

    -- Create the label
    local label = Instance.new("TextLabel", textboxBg)
    label.Size = UDim2.new(0, 100, 1, 0)
    label.Position = UDim2.new(0, 10, 0, 0)
    label.Font = BuilderUI.ActiveTheme.Font
    label.TextSize = 16
    label.TextColor3 = BuilderUI.ActiveTheme.Text
    label.Text = text
    label.BackgroundTransparency = 1
    label.TextXAlignment = Enum.TextXAlignment.Left

    -- Create the actual textbox input
    local textbox = Instance.new("TextBox", textboxBg)
    textbox.Size = UDim2.new(1, -120, 1, -10)
    textbox.Position = UDim2.new(0, 110, 0, 5)
    textbox.Font = BuilderUI.ActiveTheme.Font
    textbox.TextSize = 16
    textbox.PlaceholderText = placeholder or ""
    textbox.TextColor3 = BuilderUI.ActiveTheme.Text
    textbox.BackgroundColor3 = BuilderUI.ActiveTheme.Secondary
    textbox.ClearTextOnFocus = false
    createUICorner(textbox)

    -- Run the callback when textbox loses focus
    textbox.FocusLost:Connect(function(enterPressed)
        if callback and textbox.Text ~= "" then
            spawn(function()
                pcall(callback, textbox.Text)
            end)
        end
    end)
end
function tab:AddColorPicker(text, callback, defaultColor, tooltipText)
	local container = Instance.new("Frame", tabContent)
	container.BackgroundTransparency = 1
	container.Size = UDim2.new(1, 0, 0, 30)
	container.Name = "ColorPickerContainer"

	local label = Instance.new("TextLabel", container)
	label.Text = text
	label.Font = Enum.Font.GothamSemibold
	label.TextSize = 14
	label.TextColor3 = Color3.new(1, 1, 1)
	label.BackgroundTransparency = 1
	label.Size = UDim2.new(0.5, 0, 1, 0)
	label.Position = UDim2.new(0, 10, 0, 0)
	label.TextXAlignment = Enum.TextXAlignment.Left

	local colorButton = Instance.new("TextButton", container)
	colorButton.Size = UDim2.new(0, 40, 0, 20)
	colorButton.Position = UDim2.new(1, -50, 0.5, -10)
	colorButton.BackgroundColor3 = Color3.fromHex(defaultColor or "FFFFFF")
	colorButton.BorderSizePixel = 0
	colorButton.Text = ""
	colorButton.Name = "ColorButton"

	local uicorner = Instance.new("UICorner", colorButton)
	uicorner.CornerRadius = UDim.new(0, 4)

	-- Tooltip (optional)
	if tooltipText then
		colorButton.MouseEnter:Connect(function()
			game:GetService("StarterGui"):SetCore("SendNotification", {
				Title = "Color Picker",
				Text = tooltipText,
				Duration = 2
			})
		end)
	end

	local function showColorPicker()
		local colorPicker = Instance.new("Frame")
		colorPicker.Size = UDim2.new(0, 200, 0, 160)
		colorPicker.Position = UDim2.new(0.5, -100, 0.5, -80)
		colorPicker.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
		colorPicker.BorderSizePixel = 0
		colorPicker.ZIndex = 20
		colorPicker.Name = "ColorPickerPopup"
		colorPicker.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

		local closeButton = Instance.new("TextButton", colorPicker)
		closeButton.Text = "X"
		closeButton.Size = UDim2.new(0, 20, 0, 20)
		closeButton.Position = UDim2.new(1, -25, 0, 5)
		closeButton.BackgroundColor3 = Color3.fromRGB(100, 0, 0)
		closeButton.TextColor3 = Color3.new(1,1,1)
		closeButton.BorderSizePixel = 0
		Instance.new("UICorner", closeButton)

		closeButton.MouseButton1Click:Connect(function()
			colorPicker:Destroy()
		end)

		local colorWheel = Instance.new("Color3Value")
		colorWheel.Value = colorButton.BackgroundColor3

		local picker = Instance.new("ColorPicker", colorPicker)
		picker.Position = UDim2.new(0, 20, 0, 40)
		picker.Size = UDim2.new(1, -40, 1, -60)
		picker.Color = colorWheel.Value
		picker.Changed:Connect(function()
			colorWheel.Value = picker.Color
			colorButton.BackgroundColor3 = picker.Color
			local hex = string.format("%02X%02X%02X", 
				math.floor(picker.Color.R * 255), 
				math.floor(picker.Color.G * 255), 
				math.floor(picker.Color.B * 255))
			callback(hex)
		end)
	end

	colorButton.MouseButton1Click:Connect(function()
		showColorPicker()
	end)
end

		function tab:AddDropdown(text, options, callback, defaultIndex, tooltipText)
    -- Create the container for the dropdown
    local container = Instance.new("Frame", tabContent)
    container.BackgroundTransparency = 1
    container.ZIndex = 2
    createTooltip(container, tooltipText)

    -- Create the dropdown button
    local dropdownButton = Instance.new("TextButton", container)
    dropdownButton.Size = UDim2.new(1, 0, 0, 36)
    dropdownButton.Text = ""
    dropdownButton.BackgroundColor3 = BuilderUI.ActiveTheme.Tertiary
    createUICorner(dropdownButton)

    -- Create the label for the dropdown
    local label = Instance.new("TextLabel", dropdownButton)
    label.Size = UDim2.new(1, -35, 1, 0)
    label.Position = UDim2.new(0, 10, 0, 0)
    label.Font = BuilderUI.ActiveTheme.Font
    label.TextSize = 16
    label.TextColor3 = BuilderUI.ActiveTheme.Text
    label.Text = text .. ": " .. (options[defaultIndex] or options[1] or "")
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.BackgroundTransparency = 1

    -- Create the arrow icon
    local arrow = Instance.new("TextLabel", dropdownButton)
    arrow.Size = UDim2.new(0, 20, 1, 0)
    arrow.Position = UDim2.new(1, -30, 0, 0)
    arrow.Font = BuilderUI.ActiveTheme.BoldFont
    arrow.TextSize = 16
    arrow.TextColor3 = BuilderUI.ActiveTheme.Text
    arrow.Text = "▼"
    arrow.BackgroundTransparency = 1

    -- Create the options frame (this will hold the options that can be selected)
    local optionsFrame = Instance.new("ScrollingFrame", container)
    optionsFrame.Position = UDim2.new(0, 0, 0, 36 + 4) -- Positioning below the button with a 4px gap
    optionsFrame.Size = UDim2.new(1, 0, 0, 0) -- Initially closed
    optionsFrame.BackgroundColor3 = BuilderUI.ActiveTheme.Tertiary
    optionsFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
    optionsFrame.CanvasSize = UDim2.new()
    optionsFrame.ScrollBarThickness = 4
    optionsFrame.ClipsDescendants = true
    optionsFrame.Visible = false
    optionsFrame.ZIndex = 3
    createUICorner(optionsFrame)

    -- Correctly create the padding for the options frame
    local listLayout = Instance.new("UIListLayout", optionsFrame)
    listLayout.Padding = UDim.new(0, 2)

    -- Correct the UIPadding to set padding properly
    local listPadding = Instance.new("UIPadding", optionsFrame)
    listPadding.PaddingTop = UDim.new(0, 4)  -- Set padding for the top
    listPadding.PaddingLeft = UDim.new(0, 4) -- Optionally set padding for the left
    listPadding.PaddingRight = UDim.new(0, 4) -- Optionally set padding for the right
    listPadding.PaddingBottom = UDim.new(0, 4) -- Optionally set padding for the bottom

    -- Variable to track if the dropdown is open
    local dropdownOpen = false

    -- Set the initial size of the container
    container.Size = UDim2.new(1, 0, 0, 36)

    -- Create the buttons for each option in the dropdown
    for _, optionText in ipairs(options) do
        local optionButton = Instance.new("TextButton", optionsFrame)
        optionButton.Size = UDim2.new(1, 0, 0, 30)
        optionButton.Text = optionText
        optionButton.Font = BuilderUI.ActiveTheme.Font
        optionButton.TextSize = 14
        optionButton.TextColor3 = BuilderUI.ActiveTheme.Text
        optionButton.BackgroundTransparency = 1
        optionButton.ZIndex = 4
        createUICorner(optionButton)

        -- Add hover effects to the option buttons
        optionButton.MouseEnter:Connect(function()
            tween(optionButton, {BackgroundColor3 = BuilderUI.ActiveTheme.Accent, BackgroundTransparency = 0}):Play()
        end)

        optionButton.MouseLeave:Connect(function()
            tween(optionButton, {BackgroundTransparency = 1}):Play()
        end)

        -- Handle the option being clicked
        optionButton.MouseButton1Click:Connect(function()
            dropdownOpen = false
            arrow.Text = "▼"
            label.Text = text .. ": " .. optionText
            tween(optionsFrame, {Size = UDim2.new(1, 0, 0, 0)}):Play()
            task.wait(BuilderUI.Config.Animation.Duration / 2)
            optionsFrame.Visible = false
            container.Size = UDim2.new(1, 0, 0, 36)

            if callback then
                spawn(function()
                    pcall(callback, optionText)
                end)
            end
        end)
    end

    -- Toggle the dropdown when the button is clicked
    dropdownButton.MouseButton1Click:Connect(function()
        dropdownOpen = not dropdownOpen
        arrow.Text = dropdownOpen and "▲" or "▼"

        if dropdownOpen then
            local desiredHeight = math.min(#options * 32 + 8, 140)
            container.Size = UDim2.new(1, 0, 0, 36 + desiredHeight + 5)
            optionsFrame.Visible = true
            tween(optionsFrame, {Size = UDim2.new(1, 0, 0, desiredHeight)}):Play()
        else
            tween(optionsFrame, {Size = UDim2.new(1, 0, 0, 0)}):Play()
            task.wait(BuilderUI.Config.Animation.Duration)
            optionsFrame.Visible = false
            container.Size = UDim2.new(1, 0, 0, 36)
        end
    end)
end
function tab:AddColorPicker1(text, callback, defaultColor, tooltipText)
    local container = Instance.new("Frame", tabContent)
    container.BackgroundTransparency = 1
    container.ZIndex = 2
    container.Size = UDim2.new(1, 0, 0, 200)
    createTooltip(container, tooltipText)

    -- Label
    local label = Instance.new("TextLabel", container)
    label.Size = UDim2.new(1, 0, 0, 20)
    label.Position = UDim2.new(0, 0, 0, 0)
    label.Font = BuilderUI.ActiveTheme.Font
    label.TextSize = 16
    label.TextColor3 = BuilderUI.ActiveTheme.Text
    label.Text = text .. ": " .. (defaultColor or "FF0000")
    label.BackgroundTransparency = 1
    label.TextXAlignment = Enum.TextXAlignment.Left

    -- Color Preview
    local preview = Instance.new("Frame", container)
    preview.Size = UDim2.new(0, 20, 0, 20)
    preview.Position = UDim2.new(1, -25, 0, 0)
    preview.BackgroundColor3 = defaultColor and Color3.fromHex(defaultColor) or Color3.fromRGB(255, 0, 0)
    createUICorner(preview)

    -- Saturation/Brightness grid
    local satBright = Instance.new("ImageButton", container)
    satBright.Position = UDim2.new(0, 0, 0, 30)
    satBright.Size = UDim2.new(1, 0, 0, 130)
    satBright.BackgroundColor3 = Color3.fromHSV(0, 1, 1)
    satBright.Image = "rbxassetid://6020299385"
    satBright.ScaleType = Enum.ScaleType.Stretch
    createUICorner(satBright)

    -- SatBright pointer
    local sbPointer = Instance.new("Frame", satBright)
    sbPointer.Size = UDim2.new(0, 6, 0, 6)
    sbPointer.BackgroundColor3 = Color3.new(1, 1, 1)
    sbPointer.AnchorPoint = Vector2.new(0.5, 0.5)
    sbPointer.BorderSizePixel = 0
    createUICorner(sbPointer)

    -- Hue selector bar
    local hueBar = Instance.new("ImageButton", container)
    hueBar.Position = UDim2.new(0, 0, 0, 170)
    hueBar.Size = UDim2.new(1, 0, 0, 20)
    hueBar.Image = "rbxassetid://6020299388"
    hueBar.BackgroundTransparency = 1
    hueBar.ScaleType = Enum.ScaleType.Stretch
    createUICorner(hueBar)

    -- Hue pointer
    local huePointer = Instance.new("Frame", hueBar)
    huePointer.Size = UDim2.new(0, 4, 1, 0)
    huePointer.BackgroundColor3 = Color3.new(1, 1, 1)
    huePointer.AnchorPoint = Vector2.new(0.5, 0)
    huePointer.BorderSizePixel = 0
    createUICorner(huePointer)

    local selectedHue, selectedS, selectedV = 0, 1, 1

    local function updatePointers()
        sbPointer.Position = UDim2.new(selectedS, 0, 1 - selectedV, 0)
        huePointer.Position = UDim2.new(selectedHue, 0, 0, 0)
    end

    local function updateColor()
        local color = Color3.fromHSV(selectedHue, selectedS, selectedV)
        local hex = color:ToHex():gsub("#", "")
        preview.BackgroundColor3 = color
        label.Text = text .. ": " .. hex

        if callback then
            pcall(callback, hex)
        end
    end

    local function handleHueInput(pos)
        local relX = math.clamp((pos.X - hueBar.AbsolutePosition.X) / hueBar.AbsoluteSize.X, 0, 1)
        selectedHue = relX
        huePointer.Position = UDim2.new(selectedHue, 0, 0, 0)
        satBright.BackgroundColor3 = Color3.fromHSV(selectedHue, 1, 1)
        updateColor()
    end

    local function handleSatBrightInput(pos)
        local rel = pos - satBright.AbsolutePosition
        selectedS = math.clamp(rel.X / satBright.AbsoluteSize.X, 0, 1)
        selectedV = 1 - math.clamp(rel.Y / satBright.AbsoluteSize.Y, 0, 1)
        sbPointer.Position = UDim2.new(selectedS, 0, 1 - selectedV, 0)
        updateColor()
    end

    -- Input handling for both mobile and PC
    local userInput = game:GetService("UserInputService")

    local draggingSB, draggingHue = false, false

    hueBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            draggingHue = true
            handleHueInput(input.Position)
        end
    end)

    satBright.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            draggingSB = true
            handleSatBrightInput(input.Position)
        end
    end)

    userInput.InputChanged:Connect(function(input)
        if draggingSB and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            handleSatBrightInput(input.Position)
        elseif draggingHue and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            handleHueInput(input.Position)
        end
    end)

    userInput.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            draggingSB = false
            draggingHue = false
        end
    end)

    -- Set default color
    if defaultColor then
        local color = Color3.fromHex(defaultColor)
        selectedHue, selectedS, selectedV = color:ToHSV()
        satBright.BackgroundColor3 = Color3.fromHSV(selectedHue, 1, 1)
        updateColor()
        updatePointers()
    else
        updatePointers()
    end
end
function tab:AddInfoCard(title, value, icon, color)
	local theme = BuilderUI.ActiveTheme
	local card = Instance.new("Frame", tabContent)
	card.Size = UDim2.new(1, 0, 0, 48)
	card.BackgroundColor3 = color or theme.Secondary
	createUICorner(card, theme.Radius.Offset or 8)

	-- Determine if the icon is an asset ID (number or string of digits)
	local isAssetId = type(icon) == "number" or (type(icon) == "string" and icon:match("^%d+$"))

	if isAssetId then
		local imageLabel = Instance.new("ImageLabel", card)
		imageLabel.Size = UDim2.new(0, 32, 0, 32)
		imageLabel.Position = UDim2.new(0, 10, 0.5, -16)
		imageLabel.BackgroundTransparency = 1
		imageLabel.Image = "rbxassetid://" .. tostring(icon)
		imageLabel.ScaleType = Enum.ScaleType.Fit
	else
		local iconLabel = Instance.new("TextLabel", card)
		iconLabel.Size = UDim2.new(0, 32, 1, 0)
		iconLabel.Position = UDim2.new(0, 10, 0, 0)
		iconLabel.BackgroundTransparency = 1
		iconLabel.Font = theme.BoldFont
		iconLabel.TextSize = 20
		iconLabel.Text = icon or "ℹ️"
		iconLabel.TextColor3 = theme.Text or Color3.new(1, 1, 1)
	end

	local titleLabel = Instance.new("TextLabel", card)
	titleLabel.Size = UDim2.new(0.5, -50, 1, 0)
	titleLabel.Position = UDim2.new(0, 50, 0, 0)
	titleLabel.Font = theme.Font
	titleLabel.TextSize = 16
	titleLabel.Text = title
	titleLabel.TextColor3 = theme.Text or Color3.fromRGB(230, 230, 230)
	titleLabel.TextXAlignment = Enum.TextXAlignment.Left
	titleLabel.BackgroundTransparency = 1

	local valueLabel = Instance.new("TextLabel", card)
	valueLabel.Size = UDim2.new(0.5, -20, 1, 0)
	valueLabel.Position = UDim2.new(0.5, 0, 0, 0)
	valueLabel.Font = theme.BoldFont
	valueLabel.TextSize = 16
	valueLabel.Text = value
	valueLabel.TextColor3 = theme.Text or Color3.new(1, 1, 1)
	valueLabel.TextXAlignment = Enum.TextXAlignment.Right
	valueLabel.BackgroundTransparency = 1
end
function tab:AddUserCard(username)
	local theme = BuilderUI.ActiveTheme

	local container = Instance.new("Frame", tabContent)
	container.Size = UDim2.new(1, 0, 0, 120)
	container.BackgroundColor3 = theme.Secondary
	createUICorner(container, theme.Radius.Offset or 8)

	local avatar = Instance.new("ImageLabel", container)
	avatar.Size = UDim2.new(0, 80, 0, 80)
	avatar.Position = UDim2.new(0, 15, 0.5, -40)
	avatar.BackgroundColor3 = theme.Tertiary
	avatar.BackgroundTransparency = 0
	avatar.ScaleType = Enum.ScaleType.Fit
	createUICorner(avatar, 40)

	local displayNameLabel = Instance.new("TextLabel", container)
	displayNameLabel.Size = UDim2.new(1, -110, 0, 26)
	displayNameLabel.Position = UDim2.new(0, 105, 0.5, -20)
	displayNameLabel.Font = theme.BoldFont
	displayNameLabel.TextSize = 18
	displayNameLabel.TextColor3 = theme.Text
	displayNameLabel.BackgroundTransparency = 1
	displayNameLabel.TextXAlignment = Enum.TextXAlignment.Left
	displayNameLabel.Text = "Loading..."

	local usernameLabel = Instance.new("TextLabel", container)
	usernameLabel.Size = UDim2.new(1, -110, 0, 20)
	usernameLabel.Position = UDim2.new(0, 105, 0.5, 6)
	usernameLabel.Font = theme.Font
	usernameLabel.TextSize = 14
	usernameLabel.TextColor3 = theme.MutedText
	usernameLabel.BackgroundTransparency = 1
	usernameLabel.TextXAlignment = Enum.TextXAlignment.Left
	usernameLabel.Text = ""

	local success, userId = pcall(function()
		return game.Players:GetUserIdFromNameAsync(username)
	end)

	if success and userId then
		usernameLabel.Text = "@" .. username

		local nameSuccess, displayName = pcall(function()
			return game.Players:GetNameFromUserIdAsync(userId)
		end)

		if nameSuccess and displayName then
			displayNameLabel.Text = displayName
		else
			displayNameLabel.Text = username
		end

		local thumbSuccess, thumb = pcall(function()
			return game.Players:GetUserThumbnailAsync(userId, Enum.ThumbnailType.HeadShot, Enum.ThumbnailSize.Size100x100)
		end)

		if thumbSuccess then
			avatar.Image = thumb
		end
	else
		displayNameLabel.Text = "Unknown User"
		usernameLabel.Text = "@" .. username
	end
end
function tab:AddCredits(title, names)
	local theme = BuilderUI.ActiveTheme or {}

	local container = Instance.new("Frame", tabContent)
	container.Size = UDim2.new(1, 0, 0, 40 + (#names * 24))
	container.BackgroundTransparency = 1
	container.BackgroundColor3 = theme.BackgroundColor or Color3.new(0, 0, 0) -- optional bg

	local header = Instance.new("TextLabel", container)
	header.Size = UDim2.new(1, 0, 0, 28)
	header.Font = theme.HeaderFont or Enum.Font.BuilderSansBold
	header.TextSize = theme.HeaderSize or 18
	header.TextColor3 = theme.HeaderColor or Color3.fromRGB(255, 255, 255)
	header.Text = title or "Credits"
	header.BackgroundTransparency = 1
	header.TextXAlignment = Enum.TextXAlignment.Left
	header.TextStrokeTransparency = theme.TextStrokeTransparency or 1

	local listContainer = Instance.new("Frame", container)
	listContainer.Size = UDim2.new(1, 0, 0, #names * 24)
	listContainer.Position = UDim2.new(0, 0, 0, 32)
	listContainer.BackgroundTransparency = 1

	local layout = Instance.new("UIListLayout", listContainer)
	layout.SortOrder = Enum.SortOrder.LayoutOrder
	layout.Padding = UDim.new(0, 4)

	for _, name in ipairs(names) do
		local nameLabel = Instance.new("TextLabel", listContainer)
		nameLabel.Size = UDim2.new(1, 0, 0, 20)
		nameLabel.Font = theme.Font or Enum.Font.BuilderSans
		nameLabel.TextSize = theme.FontSize or 16
		nameLabel.TextColor3 = theme.TextColor or Color3.fromRGB(200, 200, 200)
		nameLabel.TextStrokeTransparency = theme.TextStrokeTransparency or 1
		nameLabel.Text = "- " .. name
		nameLabel.TextXAlignment = Enum.TextXAlignment.Left
		nameLabel.BackgroundTransparency = 1
	end
end
		function tab:AddTextbox(text, placeholder, callback, tooltipText)
			local container = Instance.new("Frame", tabContent)
			container.Size = UDim2.new(1, 0, 0, 36)
			container.BackgroundTransparency = 1
			createTooltip(container, tooltipText)
			local textbox = Instance.new("TextBox", container)
			textbox.Size = UDim2.new(1, 0, 1, 0)
			textbox.BackgroundColor3 = BuilderUI.ActiveTheme.Tertiary
			textbox.Text = ""
			textbox.PlaceholderText = placeholder or "Enter text here..."
			textbox.TextColor3 = BuilderUI.ActiveTheme.Text
			textbox.PlaceholderColor3 = BuilderUI.ActiveTheme.MutedText
			textbox.Font = BuilderUI.ActiveTheme.Font
			textbox.TextSize = 16
			createUICorner(textbox)
			local pad = Instance.new("UIPadding", textbox)
			pad.PaddingLeft = UDim.new(0, 10)
			pad.PaddingRight = UDim.new(0, 10)
			textbox.FocusLost:Connect(function(enterPressed)
				if enterPressed and callback then
					spawn(function() pcall(callback, textbox.Text) end)
				end
			end)
			return textbox
		end
        function tab:AddButton2(text, callback, tooltipText)
	local btn = Instance.new("TextButton", tabContent)
	btn.Size = UDim2.new(1, 0, 0, 40)
	btn.Text = text or "Button"
	btn.Font = BuilderUI.ActiveTheme.Font
	btn.TextSize = 17
	btn.TextColor3 = BuilderUI.ActiveTheme.Text
	btn.BackgroundTransparency = 1
	btn.AutoButtonColor = false
	btn.ClipsDescendants = true

	local bg = Instance.new("Frame", btn)
	bg.Size = UDim2.new(1, 0, 1, 0)
	bg.Position = UDim2.new(0, 0, 0, 0)
	bg.BackgroundTransparency = 0
	bg.ZIndex = 0
	bg.Name = "ButtonBackground"

	local gradient = Instance.new("UIGradient", bg)
	gradient.Color = ColorSequence.new({
		ColorSequenceKeypoint.new(0, BuilderUI.ActiveTheme.Accent),
		ColorSequenceKeypoint.new(1, BuilderUI.ActiveTheme.Tertiary)
	})

	createUICorner(bg)
	createUICorner(btn)

	if tooltipText then
		createTooltip(btn, tooltipText)
	end

	local shadow = Instance.new("ImageLabel", bg)
	shadow.Name = "Shadow"
	shadow.Image = "rbxassetid://1316045217"
	shadow.ImageTransparency = 0.7
	shadow.BackgroundTransparency = 1
	shadow.ScaleType = Enum.ScaleType.Slice
	shadow.SliceCenter = Rect.new(10, 10, 118, 118)
	shadow.Size = UDim2.new(1, 6, 1, 6)
	shadow.Position = UDim2.new(0, -3, 0, -3)
	shadow.ZIndex = -1

	-- Hover scale effect
	btn.MouseEnter:Connect(function()
		tween(bg, { Size = UDim2.new(1, 0, 1.05, 0) }, 0.2):Play()
	end)

	btn.MouseLeave:Connect(function()
		tween(bg, { Size = UDim2.new(1, 0, 1, 0) }, 0.2):Play()
	end)

	-- Click effect
	btn.MouseButton1Click:Connect(function()
		local press = tween(btn, { Size = UDim2.new(1, 0, 0.95, 0) }, 0.05)
		press:Play()
		press.Completed:Wait()

		tween(btn, { Size = UDim2.new(1, 0, 1, 0) }, 0.1):Play()

		if typeof(callback) == "function" then
			task.spawn(function()
				local success, err = pcall(callback)
				if not success then
					warn("[AddButton] Callback error:", err)
				end
			end)
		else
			warn("[AddButton] Callback is not a function:", typeof(callback))
		end
	end)

	return btn
end
function tab:AddChangelog(title, description, dateText, icon, tooltipText)
	local theme = BuilderUI.ActiveTheme

	-- Create container
	local container = Instance.new("Frame", tabContent)
	container.Size = UDim2.new(1, 0, 0, 0)
	container.AutomaticSize = Enum.AutomaticSize.Y
	container.BackgroundColor3 = theme.Tertiary
	container.BackgroundTransparency = 0
	container.ClipsDescendants = true
	createUICorner(container, theme.Radius.Offset or 8)

	-- Padding
	local uiPadding = Instance.new("UIPadding", container)
	uiPadding.PaddingTop = UDim.new(0, 10)
	uiPadding.PaddingBottom = UDim.new(0, 10)
	uiPadding.PaddingLeft = UDim.new(0, 10)
	uiPadding.PaddingRight = UDim.new(0, 10)

	local uiList = Instance.new("UIListLayout", container)
	uiList.FillDirection = Enum.FillDirection.Vertical
	uiList.SortOrder = Enum.SortOrder.LayoutOrder
	uiList.Padding = UDim.new(0, 6)

	-- Row
	local row = Instance.new("Frame", container)
	row.Size = UDim2.new(1, 0, 0, 0)
	row.AutomaticSize = Enum.AutomaticSize.Y
	row.BackgroundTransparency = 1
	row.Name = "Row"

	local rowLayout = Instance.new("UIListLayout", row)
	rowLayout.FillDirection = Enum.FillDirection.Horizontal
	rowLayout.SortOrder = Enum.SortOrder.LayoutOrder
	rowLayout.Padding = UDim.new(0, 8)

	-- Icon
	local iconHolder = Instance.new("Frame", row)
	iconHolder.Size = UDim2.new(0, 36, 0, 36)
	iconHolder.BackgroundTransparency = 1

	local isAssetId = type(icon) == "number" or (type(icon) == "string" and icon:match("^%d+$"))
	if isAssetId then
		local imageIcon = Instance.new("ImageLabel", iconHolder)
		imageIcon.Size = UDim2.new(1, 0, 1, 0)
		imageIcon.BackgroundTransparency = 1
		imageIcon.Image = "rbxassetid://" .. tostring(icon)
		imageIcon.ScaleType = Enum.ScaleType.Fit
	else
		local emojiIcon = Instance.new("TextLabel", iconHolder)
		emojiIcon.Size = UDim2.new(1, 0, 1, 0)
		emojiIcon.BackgroundTransparency = 1
		emojiIcon.Font = theme.BoldFont
		emojiIcon.TextSize = 24
		emojiIcon.Text = icon or "🛠️"
		emojiIcon.TextColor3 = theme.Text
		emojiIcon.TextXAlignment = Enum.TextXAlignment.Center
		emojiIcon.TextYAlignment = Enum.TextYAlignment.Center
	end

	-- Info Column (title + date)
	local infoCol = Instance.new("Frame", row)
	infoCol.BackgroundTransparency = 1
	infoCol.Size = UDim2.new(1, -36, 0, 0)
	infoCol.AutomaticSize = Enum.AutomaticSize.Y

	local infoLayout = Instance.new("UIListLayout", infoCol)
	infoLayout.FillDirection = Enum.FillDirection.Vertical
	infoLayout.SortOrder = Enum.SortOrder.LayoutOrder
	infoLayout.Padding = UDim.new(0, 2)

	local titleLabel = Instance.new("TextLabel", infoCol)
	titleLabel.Size = UDim2.new(1, 0, 0, 0)
	titleLabel.AutomaticSize = Enum.AutomaticSize.Y
	titleLabel.BackgroundTransparency = 1
	titleLabel.Font = theme.BoldFont
	titleLabel.TextSize = 16
	titleLabel.Text = title or "Update"
	titleLabel.TextColor3 = theme.Text
	titleLabel.TextXAlignment = Enum.TextXAlignment.Left
	titleLabel.TextYAlignment = Enum.TextYAlignment.Top
	titleLabel.TextWrapped = true

	local dateLabel = Instance.new("TextLabel", infoCol)
	dateLabel.Size = UDim2.new(1, 0, 0, 0)
	dateLabel.AutomaticSize = Enum.AutomaticSize.Y
	dateLabel.BackgroundTransparency = 1
	dateLabel.Font = theme.Font
	dateLabel.TextSize = 14
	dateLabel.Text = dateText or os.date("%Y-%m-%d")
	dateLabel.TextColor3 = theme.MutedText
	dateLabel.TextXAlignment = Enum.TextXAlignment.Left
	dateLabel.TextYAlignment = Enum.TextYAlignment.Top

	-- Description
	local descLabel = Instance.new("TextLabel", container)
	descLabel.Size = UDim2.new(1, 0, 0, 0)
	descLabel.AutomaticSize = Enum.AutomaticSize.Y
	descLabel.BackgroundTransparency = 1
	descLabel.Font = theme.Font
	descLabel.TextSize = 14
	descLabel.Text = description or "• No description provided"
	descLabel.TextColor3 = theme.MutedText
	descLabel.TextXAlignment = Enum.TextXAlignment.Left
	descLabel.TextYAlignment = Enum.TextYAlignment.Top
	descLabel.TextWrapped = true

	if tooltipText then
		createTooltip(container, tooltipText)
	end

	return container
end
		function tab:AddDivider()
			local divider = Instance.new("Frame", tabContent)
			divider.Size = UDim2.new(1, 0, 0, 1)
			divider.BackgroundColor3 = BuilderUI.ActiveTheme.Tertiary
			divider.BorderSizePixel = 0
		end
		
		function tab:AddKeybind(text, callback, defaultKey, tooltipText)
			local container = Instance.new("Frame", tabContent)
			container.Size = UDim2.new(1, 0, 0, 36)
			container.BackgroundTransparency = 1
			createTooltip(container, tooltipText)
			local label = Instance.new("TextLabel", container)
			label.Size = UDim2.new(0.5, 0, 1, 0)
			label.Font = BuilderUI.ActiveTheme.Font
			label.TextSize = 16
			label.TextColor3 = BuilderUI.ActiveTheme.Text
			label.Text = text
			label.TextXAlignment = Enum.TextXAlignment.Left
			label.BackgroundTransparency = 1
			local keybindButton = Instance.new("TextButton", container)
			keybindButton.Size = UDim2.new(0.5, -10, 1, 0)
			keybindButton.Position = UDim2.new(0.5, 10, 0, 0)
			keybindButton.BackgroundColor3 = BuilderUI.ActiveTheme.Tertiary
			keybindButton.Text = defaultKey and defaultKey.Name or "..."
			keybindButton.Font = BuilderUI.ActiveTheme.Font
			keybindButton.TextSize = 14
			keybindButton.TextColor3 = BuilderUI.ActiveTheme.Text
			createUICorner(keybindButton)
			keybindButton.MouseButton1Click:Connect(function()
				keybindButton.Text = "..."
				local conn
				conn = UserInputService.InputBegan:Connect(function(input, gpe)
					if gpe then return end
					if input.UserInputType == Enum.UserInputType.Keyboard then
						keybindButton.Text = input.KeyCode.Name
						conn:Disconnect()
						if callback then spawn(function() pcall(callback, input.KeyCode) end) end
					end
				end)
			end)
		end
		
		return tab
	end
	return api
end

return BuilderUI